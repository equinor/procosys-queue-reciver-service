# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
      - GroupSyncer_Deploy

variables:
  System.Debug: 'true'
  vmImageName: 'windows-latest'
  buildConfiguration: 'Release'
  ServiceBusConnectionString: $(pipelineServiceBusConnnectionString)
  WithoutProxyForTest: 'true'

stages:
  
- stage: "Build"
  jobs:
  - job:
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

   # - script: SET ServiceBusConnectionString=$(pipelineServiceBusConnnectionString)
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test $(buildConfiguration)'
      inputs:
        command: test
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
 
- stage: "PublishAndPack"
  displayName: 'Publish and Pack'
  dependsOn: 'Build'
  condition:  |
   and
   (
     succeeded(),
     or
     ( 
       eq(variables['Build.SourceBranch'], 'refs/heads/master'),
       eq(variables['Build.SourceBranch'], 'refs/heads/GroupSyncer_Deploy')
     )
    )
  jobs:
  - job: PackAndPublish
    displayName: Pack Worker and SyncService, then publish both
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self  
    - task: PowerShell@2
      name: getVersion # Name of the pipeline variable used as prefix in referenace. Example $(getVersion.packageVersion)
      displayName: 'get version from QueueReceiver.Worker.csproj'
      inputs:
        targetType: inline
        pwsh: true
        script: |
          # Set powershell variables
          $path = "src/QueueReceiver.Worker/QueueReceiver.Worker.csproj"
          $xPath = "/Project/PropertyGroup"
          $element = "VersionPrefix"
          $variableName = "packageVersion" # Name of the pipeline variable used as suffix in referenace. Example $(getVersion.packageVersion)

          # Get version from XML file

          # Check if file contains data
          $i = Get-Content $path
          if (!$i) {Write-Host "invalid filepath or file is empty"}
          else {Write-Host "File validated OK"}

          $xmlData = [xml](Get-Content $path) # Get content from xml file

          $version = ($xmlData.ChildNodes.SelectNodes("$xPath") | Select-Object $element).$element
          if (!$version) {Write-Host "Could not read xml value"} # Validates if value can be read from xml

          # Set variable
          "##vso[task.setvariable variable=$variableName;isOutput=true]$($version)"
          Write-Host "Setting variable named $variableName with value $($version)" # Use as prefix in variale referenace

    - script: dotnet publish --configuration $(buildConfiguration) -r win-x64
      displayName: 'dotnet publish $(buildConfiguration)'
    - script: dotnet pack src/QueueReceiver.Worker/QueueReceiver.Worker.csproj -p:NuspecFile=worker.nuspec -p:NuspecProperties=version=$(getVersion.packageVersion) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)\packages\releases
      displayName: 'Create NuGet Package - Release Version'
    - script: dotnet pack src/QueueReceiver.Worker/QueueReceiver.Worker.csproj -p:NuspecFile=worker.nuspec -p:NuspecProperties=version=$(getVersion.packageVersion)-"$(Build.BuildNumber)" -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)\packages\prereleases
      displayName: 'Create NuGet Package - Prerelease Version'

    - task: PowerShell@2
      name: getVersion2 # Name of the pipeline variable used as prefix in referenace. Example $(getVersion.packageVersion)
      displayName: 'get version from QueueReceiver.GroupSyncer.csproj'
      inputs:
        targetType: inline
        pwsh: true
        script: |
          # Set powershell variables
          $path = "GroupSyncer/GroupSyncer.csproj"
          $xPath = "/Project/PropertyGroup"
          $element = "VersionPrefix"
          $variableName = "packageVersion" # Name of the pipeline variable used as suffix in referenace. Example $(getVersion.packageVersion)
    
          # Get version from XML file
    
          # Check if file contains data
          $i = Get-Content $path
          if (!$i) {Write-Host "invalid filepath or file is empty"}
          else {Write-Host "File validated OK"}
    
          $xmlData = [xml](Get-Content $path) # Get content from xml file
    
          $version = ($xmlData.ChildNodes.SelectNodes("$xPath") | Select-Object $element).$element
          if (!$version) {Write-Host "Could not read xml value"} # Validates if value can be read from xml
    
          # Set variable
          "##vso[task.setvariable variable=$variableName;isOutput=true]$($version)"
          Write-Host "Setting variable named $variableName with value $($version)" # Use as prefix in variale referenace
    
    - script: dotnet publish --configuration $(buildConfiguration) -r win-x64
      displayName: 'dotnet publish $(buildConfiguration)'
    - script: dotnet pack GroupSyncer/GroupSyncer.csproj -p:NuspecFile=GroupSyncer.nuspec -p:NuspecProperties=version=$(getVersion.packageVersion) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)\packages\releases
      displayName: 'Create NuGet Package - Release Version'
    - script: dotnet pack GroupSyncer/GroupSyncer.csproj -p:NuspecFile=GroupSyncer.nuspec -p:NuspecProperties=version=$(getVersion.packageVersion)-"$(Build.BuildNumber)" -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)\packages\prereleases
      displayName: 'Create NuGet Package - Prerelease Version'

    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'      
      
- stage: "PushPrerelease"
  displayName: 'Push prerelease'
  dependsOn: 'PublishAndPack'
  condition: succeeded()
  jobs:
  - job:
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: none
    - download: current
      artifact: 'packages'
    - task: DotNetCoreCLI@2
      displayName: 'NuGet push prerelease'
      inputs:
        command: push
        feedsToUse: 'select'
        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
        publishVstsFeed: 'ProCoSysOfficial'
        allowPackageConflicts: true


- stage: "PushRelease"
  displayName: 'Push release'
  dependsOn: 'PushPrerelease'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment:
    environment: 'pcs-queue-receiver'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
            - task: NuGetAuthenticate@0
              displayName: 'NuGet Authenticate'

            - task: DotNetCoreCLI@2
              displayName: 'NuGet push release'
              inputs:
                command: push
                feedsToUse: 'select'
                packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
                publishVstsFeed: 'ProCoSysOfficial'
                allowPackageConflicts: true