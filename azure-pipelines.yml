# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
      - dev

variables:
  System.Debug: 'true'
  vmImageName: 'windows-latest'
  buildConfiguration: 'Release'

stages:
  
- stage: "Build"
  jobs:
  - job:
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test $(buildConfiguration)'
      inputs:
        command: test
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
 
- stage: "PublishAndPack"
  displayName: 'Publish and Pack'
  dependsOn: 'Build'
  condition:  |
   and
   (
     succeeded(),
     or
     ( 
       eq(variables['Build.SourceBranch'], 'refs/heads/master'),
       eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
       eq(variables['Build.SourceBranch'], 'refs/heads/pipeline')
     )
    )
  jobs:
  - job: 'getVersion'
    variables:
      filePath: 'src/QueueReceiver.Worker/QueueReceiver.Worker.csproj' # Relative path in the repo. Example: project/src/worker.csproj
      node: '/Project/PropertyGroup' # Name of the xml node. Example: /Project/ItemGroup/PackageReference
      nodeElement: 'VersionPrefix' # Name of the package. Example: "Microsoft.Extensions.Hosting.Abstractions"
      variableName: 'packageVersion' # Name of the pipeline variable used as suffix in variable referenace. Example $(getVersion.packageVersion)
    pool: 
      vmImage: 'windows-latest'
    steps:
    - powershell: |
        # Set powershell variables and get json value
        $path = "${{ variables.filePath }}"
        $xPath = "${{ variables.node }}"
        $element = "${{ variables.nodeElement }}"

        # Check if file contains data
        $i = Get-Content $path
        if (!$i) {Write-Host "invalid filepath or file is empty"}
        else {Write-Host "File validated OK"}

        $xmlData = [xml](Get-Content $path) # Get content from xml file

        $version = ($xmlData.ChildNodes.SelectNodes("$xPath") | Select-Object $element).$element
        if (!$version) {Write-Host "Could not read xml value"} # Validates if value can be read from xml

        # Set variable
        "##vso[task.setvariable variable=${{ variables.variableName }};isOutput=true]$($version)"
        Write-Host "Setting variable named ${{ variables.variableName }} with value $($version) "
      name: getVersion # Use as prefix in variable referance. Example $(getVersion.packageVersion)

  - job:
    displayName: 
    dependsOn: getVersion
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self  
    - script: dotnet publish --configuration $(buildConfiguration) -r win-x64
      displayName: 'dotnet publish $(buildConfiguration)'
    - script: dotnet pack src/QueueReceiver.Worker/QueueReceiver.Worker.csproj -p:NuspecFile=worker.nuspec -p:NuspecProperties=version=$(getVersion.packageVersion) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)\packages\releases
      displayName: 'Create NuGet Package - Release Version'
    - script: dotnet pack src/QueueReceiver.Worker/QueueReceiver.Worker.csproj -p:NuspecFile=worker.nuspec -p:NuspecProperties=version=1.0.4-"$(Build.BuildNumber)" -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)\packages\prereleases
      displayName: 'Create NuGet Package - Prerelease Version'
    
    # - publish: '$(Build.ArtifactStagingDirectory)/packages'
    #   artifact: 'packages'
    
# - stage: "PushPrerelease"
#   displayName: 'Push prerelease'
#   dependsOn: 'PublishAndPack'
#   condition: succeeded()
#   jobs:
#   - job:
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - checkout: none
#     - download: current
#       artifact: 'packages'
#     - task: DotNetCoreCLI@2
#       displayName: 'NuGet push prerelease'
#       inputs:
#         command: push
#         feedsToUse: 'select'
#         packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
#         publishVstsFeed: 'ProCoSysOfficial'
#         allowPackageConflicts: true


# - stage: "PushRelease"
#   displayName: 'Push release'
#   dependsOn: 'PushPrerelease'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   jobs:
#   - deployment:
#     environment: 'pcs-queue-receiver'
#     pool:
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - task: NuGetAuthenticate@0
#               displayName: 'NuGet Authenticate'

#             - task: DotNetCoreCLI@2
#               displayName: 'NuGet push release'
#               inputs:
#                 command: push
#                 feedsToUse: 'select'
#                 packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
#                 publishVstsFeed: 'ProCoSysOfficial'
#                 allowPackageConflicts: true